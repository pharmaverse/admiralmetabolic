% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/assertions.R
\name{assert_unit}
\alias{assert_unit}
\title{Asserts That a Parameter is Provided in One of the Expected Units}
\usage{
assert_unit(
  dataset,
  param,
  required_unit,
  get_unit_expr,
  arg_name = rlang::caller_arg(required_unit),
  message = NULL,
  class = "assert_unit",
  call = parent.frame()
)
}
\arguments{
\item{dataset}{A \code{data.frame}}

\item{param}{Parameter code of the parameter to check}

\item{required_unit}{Expected unit}

\item{get_unit_expr}{Expression used to provide the unit of \code{param}}

\item{arg_name}{string indicating the label/symbol of the object being checked.}

\item{message}{string passed to \code{cli::cli_abort(message)}.
When \code{NULL}, default messaging is used (see examples for default messages).
\code{"{arg_name}"} can be used in messaging.}

\item{class}{Subclass of the condition.}

\item{call}{The execution environment of a currently running
function, e.g. \code{call = caller_env()}. The corresponding function
call is retrieved and mentioned in error messages as the source
of the error.

You only need to supply \code{call} when throwing a condition from a
helper function which wouldn't be relevant to mention in the
message.

Can also be \code{NULL} or a \link[rlang:topic-defuse]{defused function call} to
respectively not display any call or hard-code a code to display.

For more information about error calls, see \ifelse{html}{\link[rlang:topic-error-call]{Including function calls in error messages}}{\link[rlang:topic-error-call]{Including function calls in error messages}}.}
}
\value{
The function throws an error if the unit variable differs from the
unit for any observation of the parameter in the input dataset. Otherwise, the
dataset is returned invisibly.
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#deprecated}{\figure{lifecycle-deprecated.svg}{options: alt='[Deprecated]'}}}{\strong{[Deprecated]}}

This function is to be \emph{deprecated}. Please use \code{admiraldev::assert_unit()} instead
once https://github.com/pharmaverse/admiraldev/issues/468 is closed.
}
\examples{
# See examples of `admiraldev::assert_unit`

}
\seealso{
\link[admiraldev:assert_unit]{admiraldev::assert_unit}
}
\concept{internal deprecated}
\keyword{deprecated}
\keyword{internal}
