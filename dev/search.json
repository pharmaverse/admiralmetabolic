[{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/LICENSE.html","id":"id_2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/LICENSE.html","id":"id_3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/LICENSE.html","id":"id_4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/LICENSE.html","id":"id_5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/LICENSE.html","id":"id_6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/LICENSE.html","id":"id_8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/LICENSE.html","id":"id_9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright 2024 F. Hoffmann-La Roche AG and Novo Nordisk A/S  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/articles/adcoeq.html","id":"license","dir":"Articles","previous_headings":"","what":"License","title":"Creating a Control of Eating Questionnaire ADaM","text":"Note University Leeds copyright holders Control Eating Questionnaire (CoEQ) test data included within admiralmetabolic well ADCOEQ code --profit use within admiralmetabolic pharmaverse-related examples/documentation. persons companies wanting use CoEQ request license following link.","code":""},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/articles/adcoeq.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Creating a Control of Eating Questionnaire ADaM","text":"article describes creating Control Eating Questionnaire ADaM clinical trials. advise first consult admiral Creating Questionnaire ADaMs vignette. programming workflow around creating general set-ADQS using admiral functions . vignette, focus Control Eating Questionnaire avoid repeating information maintaining content two places. , code vignette completely executable; recommend consulting ADQS template script view full workflow. Note: examples assume CDISC SDTM /ADaM format input unless otherwise specified.","code":""},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/articles/adcoeq.html","id":"required-packages","dir":"Articles","previous_headings":"Introduction","what":"Required Packages","title":"Creating a Control of Eating Questionnaire ADaM","text":"examples vignette require following packages.","code":"library(admiral) library(admiralmetabolic) library(pharmaversesdtm) library(dplyr) library(stringr)"},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/articles/adcoeq.html","id":"programming-workflow","dir":"Articles","previous_headings":"","what":"Programming Workflow","title":"Creating a Control of Eating Questionnaire ADaM","text":"Read Data Derive Core ADLB Variables Original items Derive four Subscales Remaining ADCOEQ Set-","code":""},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/articles/adcoeq.html","id":"readdata","dir":"Articles","previous_headings":"Programming Workflow","what":"Read in Data","title":"Creating a Control of Eating Questionnaire ADaM","text":"start, data frames needed creation ADaM dataset loaded global environment. Reading data usually company specific process, however, purpose vignette, use example data pharmaversesdtm admiralmetabolic. utilize DM, QS ADSL.","code":"dm_metabolic <- pharmaversesdtm::dm_metabolic qs_metabolic <- pharmaversesdtm::qs_metabolic admiralmetabolic_adsl <- admiralmetabolic::admiralmetabolic_adsl  dm <- convert_blanks_to_na(dm_metabolic) qs <- convert_blanks_to_na(qs_metabolic) adsl <- convert_blanks_to_na(admiralmetabolic_adsl)"},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/articles/adcoeq.html","id":"derive_core","dir":"Articles","previous_headings":"Programming Workflow","what":"Derive Core ADVS Variables","title":"Creating a Control of Eating Questionnaire ADaM","text":"following steps merge ADSL variables source data derive usual ADCOEQ analysis variables. Note sections required vignette covered following steps. get detailed guidance steps, refer admiral Creating BDS Finding ADaM vignette.","code":"adsl_vars <- exprs(TRTSDT, TRTEDT, TRT01P, TRT01A)  adcoeq <- derive_vars_merged(   qs,   dataset_add = adsl,   new_vars = adsl_vars,   by_vars = exprs(STUDYID, USUBJID) )"},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/articles/adcoeq.html","id":"original_items","dir":"Articles","previous_headings":"Programming Workflow","what":"Original Items","title":"Creating a Control of Eating Questionnaire ADaM","text":"original items, .e. answers questionnaire questions, can handled way {admiral} BDS finding ADaM. analysis values (AVAL AVALC) original items set directly QSSTRESN QSORRES, respectively. However, CoEQ item 6 (COEQ06) requires manual transformation, invert original scores. transformation performed CoEQ item 6 used calculating subscale “Positive Mood,” original scores indicate anxiety. cases QSSTRESN values require transformation, recommended keep original QSSTRESN values ADaM dataset traceability. deriving visits based time-windows, see admiral Visit Period Variables.","code":"adcoeq <- adcoeq %>%   # Add analysis parameter variables   mutate(     PARAMCD = QSTESTCD,     PARAM = QSTEST,     PARCAT1 = QSCAT   ) %>%   # Add timing variables   derive_vars_dt(new_vars_prefix = \"A\", dtc = QSDTC) %>%   derive_vars_dy(reference_date = TRTSDT, source_vars = exprs(ADT)) %>%   mutate(     AVISIT = case_when(       is.na(VISIT) ~ NA_character_,       str_detect(VISIT, \"UNSCHED|RETRIEVAL|AMBUL\") ~ NA_character_,       TRUE ~ str_to_title(VISIT)     ),     AVISITN = case_when(       AVISIT == \"Baseline\" ~ 0,       str_detect(AVISIT, \"Screen\") ~ -1,       str_detect(VISIT, \"WEEK\") ~ as.integer(str_extract(VISIT, \"\\\\d+\")),       TRUE ~ NA_integer_     )   ) adcoeq <- adcoeq %>%   # Add analysis value variables   mutate(     AVAL = if_else(PARAMCD == \"COEQ06\", 100 - QSSTRESN, QSSTRESN),     AVALC = if_else(PARAMCD == \"COEQ20\", QSORRES, NA_character_)   )"},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/articles/adcoeq.html","id":"subscales","dir":"Articles","previous_headings":"Programming Workflow","what":"Derive the four Subscales","title":"Creating a Control of Eating Questionnaire ADaM","text":"Control Eating Questionnaire, four subscales derived. subscales derived mean across subset various items/questions. subscales defined follows: Craving Control: Calculate mean items 9, 10, 11, 12 19. Craving Sweet: Calculate mean items 3, 13, 14 15. Craving Savoury: Calculate mean items 4, 16, 17 18. Positive Mood: Calculate mean items 5, 7, 8 6 (reversed). parameters can derived derive_summary_records():","code":"adcoeq <- adcoeq %>%   call_derivation(     derivation = derive_summary_records,     variable_params = list(       params(         filter_add = PARAMCD %in% c(\"COEQ09\", \"COEQ10\", \"COEQ11\", \"COEQ12\", \"COEQ19\"),         set_values_to = exprs(           AVAL = mean(AVAL, na.rm = TRUE),           PARAMCD = \"COEQCRCO\",           PARAM = \"COEQ - Craving Control\"         )       ),       params(         filter_add = PARAMCD %in% c(\"COEQ03\", \"COEQ13\", \"COEQ14\", \"COEQ15\"),         set_values_to = exprs(           AVAL = mean(AVAL, na.rm = TRUE),           PARAMCD = \"COEQCRSW\",           PARAM = \"COEQ - Craving for Sweet\"         )       ),       params(         filter_add = PARAMCD %in% c(\"COEQ04\", \"COEQ16\", \"COEQ17\", \"COEQ18\"),         set_values_to = exprs(           AVAL = mean(AVAL, na.rm = TRUE),           PARAMCD = \"COEQCRSA\",           PARAM = \"COEQ - Craving for Savoury\"         )       ),       params(         filter_add = PARAMCD %in% c(\"COEQ05\", \"COEQ07\", \"COEQ08\", \"COEQ06\"),         set_values_to = exprs(           AVAL = mean(AVAL, na.rm = TRUE),           PARAMCD = \"COEQPOMO\",           PARAM = \"COEQ - Positive Mood\"         )       )     ),     dataset_add = adcoeq,     by_vars = exprs(STUDYID, USUBJID, AVISIT, AVISITN, ADT, ADY, PARCAT1, TRTSDT, TRTEDT, TRT01P, TRT01A)   )"},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/articles/adcoeq.html","id":"adcoeq_end","dir":"Articles","previous_headings":"Programming Workflow","what":"Remaining ADCOEQ Set-up","title":"Creating a Control of Eating Questionnaire ADaM","text":"admiral Creating Questionnaire ADaMs vignette describes steps, including, calculate change baseline variables, add parameters questionnaire completion.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/articles/adlb.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Creating a Metabolic ADLB ADaM","text":"article describes creating laboratory ADaM metabolic clinical trials. advise first consult admiral Creating BDS Finding ADaM vignette. programming workflow around creating general set-ADLB using admiral functions . vignette, focus common ADLB derivations metabolic studies avoid repeating information maintaining content two places. Note: examples assume CDISC SDTM /ADaM format input unless otherwise specified.","code":""},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/articles/adlb.html","id":"required-packages","dir":"Articles","previous_headings":"Introduction","what":"Required Packages","title":"Creating a Metabolic ADLB ADaM","text":"examples vignette require following packages.","code":"library(admiral) library(admiralmetabolic) library(pharmaversesdtm) library(dplyr) library(stringr)"},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/articles/adlb.html","id":"programming-workflow","dir":"Articles","previous_headings":"","what":"Programming Workflow","title":"Creating a Metabolic ADLB ADaM","text":"Read Data Define Lookup Tables Derive Core ADLB Variables Derive Visit Information Add variables required derivation Derive HOMA-IR index Derive FLI score Remaining ADLB Set-Example Script","code":""},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/articles/adlb.html","id":"readdata","dir":"Articles","previous_headings":"Programming Workflow","what":"Read in Data","title":"Creating a Metabolic ADLB ADaM","text":"start, data frames needed creation ADaM dataset loaded global environment. Reading data usually company specific process, however, purpose vignette, use example data pharmaversesdtm admiralmetabolic. utilize LB ADSL data.","code":"lb_metabolic <- pharmaversesdtm::lb_metabolic admiralmetabolic_adsl <- admiralmetabolic::admiralmetabolic_adsl  lb <- convert_blanks_to_na(lb_metabolic) adsl <- convert_blanks_to_na(admiralmetabolic_adsl)"},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/articles/adlb.html","id":"lookups","dir":"Articles","previous_headings":"Programming Workflow","what":"Define Lookup Tables","title":"Creating a Metabolic ADLB ADaM","text":"Define parameter lookup table used derive PARAMCD, PARAM, PARAMN variables.","code":"# Assign PARAMCD, PARAM, and PARAMN param_lookup <- tibble::tribble(   ~LBTESTCD, ~PARAMCD, ~PARAM, ~PARAMN,   \"ALB\", \"ALB\", \"Albumin (g/L)\", 1,   \"ALP\", \"ALKPH\", \"Alkaline Phosphatase (U/L)\", 2,   \"AST\", \"AST\", \"Aspartate Aminotransferase (U/L)\", 3,   \"CHOL\", \"CHOLES\", \"Cholesterol (mmol/L)\", 4,   \"GGT\", \"GGT\", \"Gamma Glutamyl Transferase (U/L)\", 5,   \"GLUC\", \"GLUC\", \"Glucose (mmol/L)\", 6,   \"HBA1CHGB\", \"HBA1CHGB\", \"Hemoglobin A1C/Hemoglobin (mmol/mol)\", 7,   \"INSULIN\", \"INSULIN\", \"Insulin (mIU/L)\", 8,   \"TRIG\", \"TRIG\", \"Triglycerides (mg/dL)\", 9 )"},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/articles/adlb.html","id":"derive_core","dir":"Articles","previous_headings":"Programming Workflow","what":"Derive Core ADLB Variables","title":"Creating a Metabolic ADLB ADaM","text":"basic parameters timing variables can derived similarly BDS finding ADaMs. derivation Glucose Insulin, fasted results (LBFAST = \"Y\") considered. laboratory tests, fasting status affect inclusion dataset stage.","code":"# Define required ADSL variables for derivations adsl_vars <- exprs(TRTSDT, TRTEDT, TRT01A, TRT01P)  adlb <- lb %>%   # Remove non-fasted GLUC and INSULIN results   filter(!(LBTESTCD %in% c(\"GLUC\", \"INSULIN\") & LBFAST != \"Y\")) %>%   # Join ADSL with LB (need TRTSDT for ADY derivation)   derive_vars_merged(     dataset_add = adsl,     new_vars = adsl_vars,     by_vars = get_admiral_option(\"subject_keys\")   ) %>%   # Calculate ADT, ADY   derive_vars_dt(     new_vars_prefix = \"A\",     dtc = LBDTC   ) %>%   derive_vars_dy(reference_date = TRTSDT, source_vars = exprs(ADT))  adlb <- adlb %>%   # Add PARAMCD PARAM and PARAMN - from parameter lookup table   derive_vars_merged_lookup(     dataset_add = param_lookup,     new_vars = exprs(PARAMCD, PARAM, PARAMN),     by_vars = exprs(LBTESTCD)   ) %>%   ## Calculate PARCAT1 PARCAT2 AVAL AVALC ANRLO ANRHI   slice_derivation(     derivation = mutate,     args = params(       PARCAT1 = LBCAT,     ),     # Handle specific parameters requiring conventional units (CV)     derivation_slice(       filter = LBTESTCD %in% c(\"TRIG\", \"INSULIN\"),       args = params(         PARCAT2 = \"CV\",         AVAL = as.numeric(LBORRES),         AVALC = NA_character_,         ANRLO = as.numeric(LBORNRLO),         ANRHI = as.numeric(LBORNRHI)       )     ),     # Handle other parameters using standard units (SI)     derivation_slice(       filter = TRUE,       args = params(         PARCAT2 = \"SI\",         AVAL = LBSTRESN,         # Only populate AVALC if character value is non-redundant with AVAL         AVALC = if_else(           is.na(AVAL) | as.character(AVAL) != LBSTRESC,           LBSTRESC,           NA_character_         ),         ANRLO = LBSTNRLO,         ANRHI = LBSTNRHI       )     )   ) #> All `LBTESTCD` are mapped."},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/articles/adlb.html","id":"derive_visits","dir":"Articles","previous_headings":"Programming Workflow","what":"Derive Visit Information","title":"Creating a Metabolic ADLB ADaM","text":"Derive Analysis Visit (AVISIT) Analysis Visit Number (AVISITN). deriving visits based time-windows, see admiral Visit Period Variables.","code":"adlb <- adlb %>%   mutate(     AVISIT = case_when(       str_detect(VISIT, \"SCREEN\") ~ \"Baseline\",       !is.na(VISIT) ~ str_to_title(VISIT),       TRUE ~ NA_character_     ),     AVISITN = case_when(       AVISIT == \"Baseline\" ~ 0,       str_detect(VISIT, \"WEEK\") ~ as.integer(str_extract(VISIT, \"\\\\d+\")),       TRUE ~ NA_integer_     )   )"},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/articles/adlb.html","id":"metabolic_params_desc","dir":"Articles","previous_headings":"Programming Workflow","what":"Derive Metabolic Parameters","title":"Creating a Metabolic ADLB ADaM","text":"addition core ADLB variables, several metabolic parameters scores derived based laboratory data vital signs. derivations include: Fatty Liver Index (FLI): Derived triglycerides (mg/dL), GGT (U/L), BMI (kg/m2), waist circumference (cm). \\[ FLI = \\left[\\frac{\\exp(\\lambda)}{1 + \\exp(\\lambda)}\\right] \\times 100 \\] \\[ \\lambda = 0.953 \\times \\ln (\\text{triglycerides}) + 0.139 \\times BMI + 0.718 \\times \\ln (GGT) + 0.053 \\times \\text{waist circumference} – 15.745. \\] FLI interpreted score 0 100, higher values indicate worse condition. Homeostasis Model Assessment – Insulin Resistance (HOMA-IR): Calculated fasting plasma glucose (mmol/L) fasting plasma insulin (mIU/L). \\[ \\text{HOMA-IR} = \\frac{FPI \\times FPG}{22.5}. \\] alternative formula used fasting plasma glucose assessed mg/dL: \\[ \\text{HOMA-IR} = \\frac{FPI \\times FPG}{405}. \\] derive parameters scores, following variables needed: ADLB: TRIG (Triglycerides), GGT, GLUC (fasted), INSULIN (fasted). ADVS: BMI, WSTCIR (Waist Circumference).","code":""},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/articles/adlb.html","id":"merge","dir":"Articles","previous_headings":"Programming Workflow > Derive Metabolic Parameters","what":"Add variables required for derivation","title":"Creating a Metabolic ADLB ADaM","text":"section, merge relevant variables needed derive metabolic parameter ADVS (Analysis Dataset Vital Signs) dataset ADLB dataset. necessary include variables BMI Waist Circumference, required derivation FLI score parameter subsequent section. Please note example merge ADT, also possible merge AVISIT windowing algorithms specified statistical analysis plan.","code":"# Load ADVS dataset (assuming it has been created by ad_advs.R) admiralmetabolic_advs <- admiralmetabolic::admiralmetabolic_advs advs <- convert_blanks_to_na(admiralmetabolic_advs)  # Merge BMI and WSTCIR from ADVS to ADLB based on subject and date adlb <- adlb %>%   derive_vars_transposed(     advs,     by_vars = exprs(!!!get_admiral_option(\"subject_keys\"), ADT),     key_var = PARAMCD,     value_var = AVAL,     filter = PARAMCD %in% c(\"BMI\", \"WSTCIR\")   )"},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/articles/adlb.html","id":"derive_homa","dir":"Articles","previous_headings":"Programming Workflow > Derive Metabolic Parameters","what":"Derive HOMA-IR index","title":"Creating a Metabolic ADLB ADaM","text":"part describes calculate Homeostasis Model Assessment – Insulin Resistance (HOMA-IR) index fasting plasma glucose fasting plasma insulin. derivation require merging data datasets.","code":"# Derive HOMA-IR using derive_param_computed adlb <- adlb %>%   derive_param_computed(     by_vars = exprs(!!!get_admiral_option(\"subject_keys\"), AVISIT, AVISITN, ADT, ADY, !!!adsl_vars),     parameters = c(\"INSULIN\", \"GLUC\"),     set_values_to = exprs(       AVAL = AVAL.INSULIN * AVAL.GLUC / 22.5,       PARAMCD = \"HOMAIR\",       PARAM = \"Homeostasis Model Assessment - Insulin Resistance\",       PARAMN = 10     )   )"},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/articles/adlb.html","id":"derive_fli","dir":"Articles","previous_headings":"Programming Workflow > Derive Metabolic Parameters","what":"Derive FLI score","title":"Creating a Metabolic ADLB ADaM","text":"obtain FLI score parameter, ’ll utilize triglycerides, GGT, BMI, waist circumference. Note derivation requires merging data ADVS dataset (BMI Waist Circumference), demonstrated previous section. FLI provided example; users can derive metabolic scores like HSI, NAFLD, others using logic required input variables.","code":"# Derive FLI using derive_param_computed adlb <- adlb %>%   derive_param_computed(     by_vars = exprs(!!!get_admiral_option(\"subject_keys\"), AVISIT, AVISITN, ADT, ADY, BMI, WSTCIR, !!!adsl_vars),     parameters = c(\"TRIG\", \"GGT\"),     set_values_to = exprs(       AVAL = {         lambda <- 0.953 * log(AVAL.TRIG) + 0.139 * BMI + 0.718 * log(AVAL.GGT) + 0.053 * WSTCIR - 15.745         (exp(lambda) / (1 + exp(lambda))) * 100       },       PARAMCD = \"FLI\",       PARAM = \"Fatty Liver Index\",       PARAMN = 11     )   )  adlb <- adlb %>%   arrange(!!!get_admiral_option(\"subject_keys\"), ADT, PARAMN) # Arrange for consistency"},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/articles/adlb.html","id":"adlb_end","dir":"Articles","previous_headings":"Programming Workflow","what":"Remaining ADLB Set-up","title":"Creating a Metabolic ADLB ADaM","text":"admiral Creating BDS Finding ADaM vignette describes steps, including calculate baseline change baseline variables, add analysis flags (e.g., ANL01FL), handle reference ranges, categorizations, common ADLB requirements.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/articles/admiralmetabolic.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Get Started","text":"package extension, new admiral best place first start reading Get Started page. extension package follows main idea conventions, re-uses many functions admiral, important thoroughly understand able use admiralmetabolic.","code":""},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/articles/admiralmetabolic.html","id":"derivations","dir":"Articles","previous_headings":"","what":"Derivations","title":"Get Started","text":"important functions admiralmetabolic derivations. follow conventions admiral focused metabolism-specific needs.","code":""},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/articles/admiralmetabolic.html","id":"creating-adam-datasets","dir":"Articles","previous_headings":"","what":"Creating ADaM Datasets","title":"Get Started","text":"metabolic ADaM data structures, overview flow example function calls common steps provided following vignettes: Creating Control Eating Questionnaire ADaM Creating Metabolic ADVS ADaM admiralmetabolic also provides template R scripts starting point. can created calling use_ad_template() admiral, e.g., list available templates admiralmetabolic can obtained list_all_templates() admiral:","code":"library(admiral)  use_ad_template(   adam_name = \"advs\",   save_path = \"./ad_advs.R\",   package = \"admiralmetabolic\" ) list_all_templates(package = \"admiralmetabolic\")"},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/articles/admiralmetabolic.html","id":"support","dir":"Articles","previous_headings":"","what":"Support","title":"Get Started","text":"Support provided via pharmaverse Slack. Additionally, please feel free raise issues GitHub repository.","code":""},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/articles/advs.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Creating a Metabolic ADVS ADaM","text":"article describes creating vital signs ADaM metabolic clinical trials. advise first consult admiral Creating BDS Finding ADaM vignette. programming workflow around creating general set-ADVS using admiral functions . vignette, focus common endpoints derivations mainly found metabolic trials avoid repeating information maintaining content two places. , code vignette completely executable; recommend consulting ADVS template script view full workflow.","code":""},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/articles/advs.html","id":"required-packages","dir":"Articles","previous_headings":"Introduction","what":"Required Packages","title":"Creating a Metabolic ADVS ADaM","text":"examples vignette require following packages.","code":"library(admiral) library(admiralmetabolic) library(pharmaversesdtm) library(dplyr)"},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/articles/advs.html","id":"programming-workflow","dir":"Articles","previous_headings":"","what":"Programming Workflow","title":"Creating a Metabolic ADVS ADaM","text":"Read Data Derive Core ADLB Variables Assign PARAMCD, PARAM, PARAMN, PARCAT1 Derive BMI Derive waist hip ratio Derive Categorization Variables (AVALCATy, BASECATy) Derive Criterion Variables (CRITy, CRITyFL, CRITyFN) Remaining ADVS Set-","code":""},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/articles/advs.html","id":"readdata","dir":"Articles","previous_headings":"Programming Workflow","what":"Read in Data","title":"Creating a Metabolic ADVS ADaM","text":"start, data frames needed creation ADVS loaded global environment. Reading data usually company specific process, however, purpose vignette, use example data pharmaversesdtm admiralmetabolic. utilize DM, VS ADSL basis ADVS.","code":"dm_metabolic <- pharmaversesdtm::dm_metabolic vs_metabolic <- pharmaversesdtm::vs_metabolic admiralmetabolic_adsl <- admiralmetabolic::admiralmetabolic_adsl  dm <- convert_blanks_to_na(dm_metabolic) vs <- convert_blanks_to_na(vs_metabolic) adsl <- convert_blanks_to_na(admiralmetabolic_adsl)"},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/articles/advs.html","id":"derive_core","dir":"Articles","previous_headings":"Programming Workflow","what":"Derive Core ADVS Variables","title":"Creating a Metabolic ADVS ADaM","text":"following steps merge ADSL variables source data derive usual ADVS analysis variables. Note sections required vignette covered following steps. get detailed guidance steps, refer admiral Creating BDS Finding ADaM vignette.","code":"adsl_vars <- exprs(TRTSDT, TRTEDT, TRT01P, TRT01A)  advs <- derive_vars_merged(   vs,   dataset_add = adsl,   new_vars = adsl_vars,   by_vars = exprs(STUDYID, USUBJID) )  advs <- derive_vars_dt(advs, new_vars_prefix = \"A\", dtc = VSDTC) advs <- derive_vars_dy(advs, reference_date = TRTSDT, source_vars = exprs(ADT))"},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/articles/advs.html","id":"paramcd","dir":"Articles","previous_headings":"Programming Workflow","what":"Create PARAMCD, PARAM, PARAMN, PARCAT1 variables","title":"Creating a Metabolic ADVS ADaM","text":"next step create assign parameter level variables PARAMCD, PARAM, PARAMN, PARCAT1, etc. , lookup can created based SDTM --TESTCD value join source data. One key addition metabolic trials vital sign parameters associated body measurements, BMI, HIPCIR, WSTCIR. lookup may now joined source data parameters look like:","code":"param_lookup <- tribble(   ~VSTESTCD, ~PARAMCD, ~PARAM, ~PARAMN, ~PARCAT1, ~PARCAT1N,   \"HEIGHT\", \"HEIGHT\", \"Height (cm)\", 1, \"Anthropometric Measurement\", 1,   \"WEIGHT\", \"WEIGHT\", \"Weight (kg)\", 2, \"Anthropometric Measurement\", 1,   \"BMI\", \"BMI\", \"Body Mass Index(kg/m^2)\", 3, \"Anthropometric Measurement\", 1,   \"HIPCIR\", \"HIPCIR\", \"Hip Circumference (cm)\", 4, \"Anthropometric Measurement\", 1,   \"WSTCIR\", \"WSTCIR\", \"Waist Circumference (cm)\", 5, \"Anthropometric Measurement\", 1,   \"DIABP\", \"DIABP\", \"Diastolic Blood Pressure (mmHg)\", 6, \"Vital Sign\", 2,   \"PULSE\", \"PULSE\", \"Pulse Rate (beats/min)\", 7, \"Vital Sign\", 2,   \"SYSBP\", \"SYSBP\", \"Systolic Blood Pressure (mmHg)\", 8, \"Vital Sign\", 2,   \"TEMP\", \"TEMP\", \"Temperature (C)\", 9, \"Vital Sign\", 2 ) advs <- derive_vars_merged_lookup(   advs,   dataset_add = param_lookup,   new_vars = exprs(PARAMCD, PARAM, PARAMN, PARCAT1, PARCAT1N),   by_vars = exprs(VSTESTCD) )"},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/articles/advs.html","id":"derive_param","dir":"Articles","previous_headings":"Programming Workflow","what":"Derive Parameters for Metabolic indicators","title":"Creating a Metabolic ADVS ADaM","text":"clinical trials focused metabolic conditions, ’s common derive additional parameters collected data. derived parameters often provide valuable insights metabolic health subjects. vignette, explore one derive BMI waist-hip ratio.","code":""},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/articles/advs.html","id":"bmi","dir":"Articles","previous_headings":"Programming Workflow > Derive Parameters for Metabolic indicators","what":"Derive BMI","title":"Creating a Metabolic ADVS ADaM","text":"metabolic trials, BMI often calculated source. creating ADVS dataset, re-derive BMI collected height weight values. done ensure BMI calculated consistently across subjects visits. step, create parameter Body Mass Index (BMI) ADVS domain using derive_param_bmi() function. Note variables specified by_vars argument populated newly created records. Also note height collected subject use constant_by_vars specify function merge subject-level variable - otherwise BMI calculated visits collected.","code":"# Remove BMI collected in SDTM advs <- advs %>% filter(VSTESTCD != \"BMI\" | is.na(VSTESTCD))  # Re-calculate BMI advs <- derive_param_bmi(   advs,   by_vars = c(     get_admiral_option(\"subject_keys\"),     exprs(!!!adsl_vars, VISIT, VISITNUM, ADT, ADY, VSTPT, VSTPTNUM)   ),   set_values_to = exprs(     PARAMCD = \"BMI\",     PARAM = \"Body Mass Index (kg/m^2)\",     PARAMN = 3,     PARCAT1 = \"Anthropometric Measurement\",     PARCAT1N = 1   ),   get_unit_expr = VSSTRESU,   constant_by_vars = exprs(USUBJID) )"},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/articles/advs.html","id":"whr","dir":"Articles","previous_headings":"Programming Workflow > Derive Parameters for Metabolic indicators","what":"Derive waist hip-ratio","title":"Creating a Metabolic ADVS ADaM","text":"Metabolic trials often include ratios different anthropometric measurements. , {admiralmetabolic} provides several functions quickly calculate various anthropometric ratios. instance, function derive_param_waisthip() can used derive waist-hip ratio.","code":"advs <- advs %>%   derive_param_waisthip(     by_vars = exprs(!!!get_admiral_option(\"subject_keys\"), VISIT, VISITNUM),     wstcir_code = \"WSTCIR\",     hipcir_code = \"HIPCIR\",     set_values_to = exprs(       PARAMCD = \"WAISTHIP\",       PARAM = \"Waist to Hip Ratio\"     ),     get_unit_expr = VSSTRESU   )"},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/articles/advs.html","id":"common_endpoints","dir":"Articles","previous_headings":"Programming Workflow","what":"Derive Variables for Metabolic indicators","title":"Creating a Metabolic ADVS ADaM","text":"following sections, explore common endpoints typically observed metabolic trials. One endpoint improvement weight category baseline end treatment, often assessed using Body Mass Index (BMI). capture , derive variables AVALCATy BASECATy, detailed subsequent section. Additionally, achievement weight reduction thresholds, >= 5%, >= 10%, >= 15% baseline end treatment certain visit, common endpoint metabolic trials. accommodate criteria, derive relevant criterion variables CRITy, CRITyFL, CRITyFLN, necessary functions provided admiral outlined .","code":""},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/articles/advs.html","id":"derive-categorization-variables-avalcaty-basecaty","dir":"Articles","previous_headings":"Programming Workflow > Derive Variables for Metabolic indicators","what":"Derive Categorization Variables (AVALCATy, BASECATy)","title":"Creating a Metabolic ADVS ADaM","text":"deriving categorization variables (AVALCATy, BASECATy) admiral provides derive_vars_cat() (see documentation function details). Now can use derive_var_base derive BASECATy/ BASECAyN variables.","code":"avalcat_lookup <- exprs(   ~PARAMCD, ~condition,                ~AVALCAT1,           ~AVALCA1N,   \"BMI\",    AVAL < 18.5,               \"Underweight\",       1,   \"BMI\",    AVAL >= 18.5 & AVAL < 25,  \"Normal weight\",     2,   \"BMI\",    AVAL >= 25 & AVAL < 30,    \"Overweight\",        3,   \"BMI\",    AVAL >= 30 & AVAL < 35,    \"Obesity class I\",   4,   \"BMI\",    AVAL >= 35 & AVAL < 40,    \"Obesity class II\",  5,   \"BMI\",    AVAL >= 40,                \"Obesity class III\", 6,   \"BMI\",    is.na(AVAL),               NA_character_,       NA_integer_ )  # Derive BMI class (AVALCAT1, AVALCA1N) advs <- advs %>%   derive_vars_cat(     definition = avalcat_lookup,     by_vars = exprs(PARAMCD)   ) advs <- advs %>%   derive_var_base(     by_vars = exprs(!!!get_admiral_option(\"subject_keys\"), PARAMCD),     source_var = AVALCAT1,     new_var = BASECAT1   ) %>%   derive_var_base(     by_vars = exprs(!!!get_admiral_option(\"subject_keys\"), PARAMCD),     source_var = AVALCA1N,     new_var = BASECA1N   )"},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/articles/advs.html","id":"crit_vars","dir":"Articles","previous_headings":"Programming Workflow > Derive Variables for Metabolic indicators","what":"Derive Criterion Variables (CRITy, CRITyFL, CRITyFN)","title":"Creating a Metabolic ADVS ADaM","text":"deriving criterion variables (CRITy, CRITyFL, CRITyFN) admiral provides derive_vars_crit_flag(). ensures derived ADaM-compliant way (see documentation function details). cases criterion depends parameter case higher order function restrict_derivation() can useful. following example, criterion flags weight based percentage change weight reduction baseline derived. Additional criterion flags can added needed.","code":"advs <- advs %>%   restrict_derivation(     derivation = derive_vars_crit_flag,     args = params(       condition = PCHG <= -5 & PARAMCD == \"WEIGHT\",       description = \"Achievement of >= 5% weight reduction from baseline\",       crit_nr = 1,       values_yn = TRUE,       create_numeric_flag = FALSE     ),     filter = VISITNUM > 0 & PARAMCD == \"WEIGHT\"   ) %>%   restrict_derivation(     derivation = derive_vars_crit_flag,     args = params(       condition = PCHG <= -10 & PARAMCD == \"WEIGHT\",       description = \"Achievement of >= 10% weight reduction from baseline\",       crit_nr = 2,       values_yn = TRUE,       create_numeric_flag = FALSE     ),     filter = VISITNUM > 0 & PARAMCD == \"WEIGHT\"   )"},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/articles/advs.html","id":"advs_end","dir":"Articles","previous_headings":"Programming Workflow","what":"Remaining ADVS Set-up","title":"Creating a Metabolic ADVS ADaM","text":"admiral Creating BDS Finding ADaM vignette covers steps shown , merging parameter-level values, timing variables, analysis flags.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Anders Askeland. Author, maintainer. Andrii Yurovskyi. Author. Kathrin Flunkert. Author. Edoardo Mancini. Author. Shunsuke Goto. Author. Siddhesh Pujari. Author. Sonali Das. Author. Olga Starostecka. Author. Vang Le-Quy. Author. Keita Takahashi. Author.","code":""},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Askeland , Yurovskyi , Flunkert K, Mancini E, Goto S, Pujari S, Das S, Starostecka O, Le-Quy V, Takahashi K (2025). admiralmetabolic: Metabolism Extension Package ADaM 'R' Asset Library. R package version 0.1.0.9011, https://github.com/pharmaverse/admiralmetabolic, https://pharmaverse.github.io/admiralmetabolic/.","code":"@Manual{,   title = {admiralmetabolic: Metabolism Extension Package for ADaM in 'R' Asset Library},   author = {Anders Askeland and Andrii Yurovskyi and Kathrin Flunkert and Edoardo Mancini and Shunsuke Goto and Siddhesh Pujari and Sonali Das and Olga Starostecka and Vang Le-Quy and Keita Takahashi},   year = {2025},   note = {R package version 0.1.0.9011,     https://github.com/pharmaverse/admiralmetabolic},   url = {https://pharmaverse.github.io/admiralmetabolic/}, }"},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/index.html","id":"admiralmetabolic-","dir":"","previous_headings":"","what":"Metabolism Extension Package for ADaM in R Asset Library","title":"Metabolism Extension Package for ADaM in R Asset Library","text":"Metabolism extension package ADaM R Asset Library admiral","code":""},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/index.html","id":"purpose","dir":"","previous_headings":"","what":"Purpose","title":"Metabolism Extension Package for ADaM in R Asset Library","text":"provide complementary (admiral) toolbox enables users develop specifics metabolic clinical trials.","code":""},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Metabolism Extension Package for ADaM in R Asset Library","text":"package available CRAN can installed : install latest development version package directly GitHub use following code:","code":"install.packages(\"admiralmetabolic\") install.packages(\"pak\") pak::pkg_install(\"admiralmetabolic\", dependencies = TRUE)"},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/index.html","id":"dependencies","dir":"","previous_headings":"Installation","what":"Dependencies","title":"Metabolism Extension Package for ADaM in R Asset Library","text":"latest version package works latest versions packages stated DESCRIPTION. previous version package used, recommended use latest version dependencies point time previous version admiralmetabolic released.","code":""},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/index.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Metabolism Extension Package for ADaM in R Asset Library","text":"Build toolbox re-usable functions utilities create metabolism-specific ADaM datasets R modular manner. functions created based upon ADaM Implementation Guide aim facilitate programming ADaM dataset standards. Initially package focus obesity therapeutic area.","code":""},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/index.html","id":"expectations","dir":"","previous_headings":"","what":"Expectations","title":"Metabolism Extension Package for ADaM in R Asset Library","text":"admiralmetabolic expected complement admiral provide functions help creation analyses required metabolic trial ADaMs.","code":""},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/index.html","id":"references-and-documentation","dir":"","previous_headings":"","what":"References and Documentation","title":"Metabolism Extension Package for ADaM in R Asset Library","text":"Please refer References Documentation","code":""},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/index.html","id":"r-versions","dir":"","previous_headings":"","what":"R Versions","title":"Metabolism Extension Package for ADaM in R Asset Library","text":"’s summary strategy package related R versions: R versions developers users follow admiral core package. development main branch admiral core used dependency. releasing new admiralmetabolic version must run using latest released admiral core version.","code":""},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/index.html","id":"contact","dir":"","previous_headings":"","what":"Contact","title":"Metabolism Extension Package for ADaM in R Asset Library","text":"use following support communications user developer community: Slack - informal discussions, Q&building user community. don’t access, use link join pharmaverse Slack workspace GitHub Issues - direct feedback, enhancement requests raising bugs","code":""},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/reference/admiralmetabolic-package.html","id":null,"dir":"Reference","previous_headings":"","what":"admiralmetabolic: Metabolism Extension Package for ADaM in 'R' Asset Library — admiralmetabolic-package","title":"admiralmetabolic: Metabolism Extension Package for ADaM in 'R' Asset Library — admiralmetabolic-package","text":"toolbox programming Clinical Data Standards Interchange Consortium (CDISC) compliant Analysis Data Model (ADaM) datasets R. ADaM datasets mandatory part New Drug Biologics License Application submitted United States Food Drug Administration (FDA). Analysis derivations implemented accordance \"Analysis Data Model Implementation Guide\" (CDISC Analysis Data Model Team, 2021, https://www.cdisc.org/standards/foundational/adam). package extension package 'admiral' package focusing metabolism therapeutic area.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/reference/admiralmetabolic-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"admiralmetabolic: Metabolism Extension Package for ADaM in 'R' Asset Library — admiralmetabolic-package","text":"Maintainer: Anders Askeland iakd@novonordisk.com (ORCID) Authors: Andrii Yurovskyi andrii.yurovskyi@intego-group.com (ORCID) Kathrin Flunkert kathrin.flunkert@roche.com Edoardo Mancini edoardo.mancini@roche.com (ORCID) Shunsuke Goto shunsuke.goto@novartis.com Siddhesh Pujari spuj@novonordisk.com (ORCID) Sonali Das sxd@novonordisk.com Olga Starostecka olga.starostecka@boehringer-ingelheim.com Vang Le-Quy vqul@novonordisk.com (ORCID) Keita Takahashi keita.takahashi.4.biz@gmail.com (ORCID)","code":""},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/reference/admiralmetabolic_adsl.html","id":null,"dir":"Reference","previous_headings":"","what":"Subject Level Analysis Dataset — admiralmetabolic_adsl","title":"Subject Level Analysis Dataset — admiralmetabolic_adsl","text":"example subject level analysis dataset","code":""},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/reference/admiralmetabolic_adsl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subject Level Analysis Dataset — admiralmetabolic_adsl","text":"","code":"admiralmetabolic_adsl"},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/reference/admiralmetabolic_adsl.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Subject Level Analysis Dataset — admiralmetabolic_adsl","text":"object class tbl_df (inherits tbl, data.frame) 306 rows 54 columns.","code":""},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/reference/admiralmetabolic_adsl.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Subject Level Analysis Dataset — admiralmetabolic_adsl","text":"Derived ad_adsl_metabolic template","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/reference/admiralmetabolic_advs.html","id":null,"dir":"Reference","previous_headings":"","what":"Vital sings Dataset — admiralmetabolic_advs","title":"Vital sings Dataset — admiralmetabolic_advs","text":"example vital sings analysis dataset","code":""},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/reference/admiralmetabolic_advs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vital sings Dataset — admiralmetabolic_advs","text":"","code":"admiralmetabolic_advs"},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/reference/admiralmetabolic_advs.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Vital sings Dataset — admiralmetabolic_advs","text":"object class tbl_df (inherits tbl, data.frame) 760 rows 101 columns.","code":""},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/reference/admiralmetabolic_advs.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Vital sings Dataset — admiralmetabolic_advs","text":"Derived ad_advs template","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/reference/derive_param_ratio.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds a Ratio Parameter Computed from the Analysis Value of Other Parameters — derive_param_ratio","title":"Adds a Ratio Parameter Computed from the Analysis Value of Other Parameters — derive_param_ratio","text":"Adds record generic Ratio parameter using two existing parameter (numerator denominator) group (e.g., subject visit) source parameters available. Note: wrapper function generic admiral::derive_param_computed().","code":""},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/reference/derive_param_ratio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds a Ratio Parameter Computed from the Analysis Value of Other Parameters — derive_param_ratio","text":"","code":"derive_param_ratio(   dataset,   by_vars,   numerator_code,   denominator_code,   set_values_to,   constant_numerator = FALSE,   constant_denominator = FALSE,   filter = NULL,   constant_by_vars = NULL,   get_unit_expr = NULL,   unit_conversion = FALSE )"},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/reference/derive_param_ratio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds a Ratio Parameter Computed from the Analysis Value of Other Parameters — derive_param_ratio","text":"dataset Input dataset variables specified by_vars argument expected dataset. PARAMCD, AVAL expected well. variable specified by_vars PARAMCD must unique key input dataset restricting filter condition (filter argument) parameters specified numerator_code denominator_code. by_vars Grouping variables Grouping variables uniquely identifying set records new_vars calculated. Permitted Values: list variables created exprs() numerator_code Numerator parameter code observations PARAMCD equals specified value considered numerator. Permitted Values: character value denominator_code Denominator parameter code observations PARAMCD equals specified value considered denominator. Permitted Values: character value set_values_to Variables set specified variables set specified values new observations. example exprs(PARAMCD = \"RATIO\") defines parameter code new parameter. Permitted Values: List variable-value pairs constant_numerator numerator parameter constant? expected parameter code (PARAMCD) specified numerator_code required derive new parameter measured . example, Height Weight Ratio derived height measured Weight measured visit. Height specified numerator_code argument constant_numerator set TRUE. Permitted Values: logical scalar constant_denominator denominator parameter constant? expected parameter code (PARAMCD) specified numerator_code required derive new parameter measured . example, Waist Height Ratio derived height measured Waist Circumference measured visit. Height specified denominator_code argument constant_denominator set TRUE. Permitted Values: logical scalar filter Filter condition specified condition applied input dataset deriving new parameter, .e., observations fulfilling condition taken account. Permitted Values: condition constant_by_vars variables numerator /denominator constant numerator /denominator constant, parameters (measured ) merged parameters using specified variables. numerator /denominator constant (e.g. measured screening baseline) use constant_by_vars select subject-level variable merge (e.g. USUBJID). produce generic Ratio parameter visits numerator /denominator measured. Otherwise calculated visits numerator denominator parameters collected. Permitted Values: list variables created exprs(), e.g. exprs(USUBJID, VISIT) get_unit_expr expression providing unit parameter result used check units input parameters. units consistent within parameter, error thrown. Additionally, input parameters measured different units mutually convertible (e.g., centimeters one parameter inches another), automatic conversion performed order uniform values calculating ratio. Note: Conversion factors come unit definitions per CDISC standards. m defined 100 cm mm defined 0.1 cm defined 2.54 cm ft defined 30.48 cm Permitted Values: variable input dataset function call unit_conversion Enable/Disable unit conversion Unit conversion disabled default. Ignored get_unit_expr NULL. Permitted Values: logical scalar","code":""},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/reference/derive_param_ratio.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds a Ratio Parameter Computed from the Analysis Value of Other Parameters — derive_param_ratio","text":"input dataset new parameter added. Note, variable populated new parameter rows specified by_vars.","code":""},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/reference/derive_param_ratio.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adds a Ratio Parameter Computed from the Analysis Value of Other Parameters — derive_param_ratio","text":"analysis value new parameter derived $$RATIO = \\frac{NUMERATOR}{DENOMINATOR}$$","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/reference/derive_param_waisthgt.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds a Parameter for Waist to Height Ratio — derive_param_waisthgt","title":"Adds a Parameter for Waist to Height Ratio — derive_param_waisthgt","text":"Adds parameter Waist Height Ratio using Waist Circumference Height group (e.g., subject visit) source parameters available. Note: wrapper function generic admiral::derive_param_computed().","code":""},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/reference/derive_param_waisthgt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds a Parameter for Waist to Height Ratio — derive_param_waisthgt","text":"","code":"derive_param_waisthgt(   dataset,   by_vars,   wstcir_code = \"WSTCIR\",   height_code = \"HEIGHT\",   set_values_to = exprs(PARAMCD = \"WAISTHGT\"),   filter = NULL,   constant_by_vars = NULL,   get_unit_expr )"},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/reference/derive_param_waisthgt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds a Parameter for Waist to Height Ratio — derive_param_waisthgt","text":"dataset Input dataset variables specified by_vars argument expected dataset. PARAMCD, AVAL expected well. variable specified by_vars PARAMCD must unique key input dataset restricting filter condition (filter argument) parameters specified wstcir_code height_code. by_vars Grouping variables Grouping variables uniquely identifying set records new_vars calculated. Permitted Values: list variables created exprs() wstcir_code Waist Circumference parameter code observations PARAMCD equals specified value considered Waist Circumference. Permitted Values: character value height_code Height parameter code observations PARAMCD equals specified value considered Height. Permitted Values: character value set_values_to Variables set specified variables set specified values new observations. example exprs(PARAMCD = \"RATIO\") defines parameter code new parameter. Permitted Values: List variable-value pairs filter Filter condition specified condition applied input dataset deriving new parameter, .e., observations fulfilling condition taken account. Permitted Values: condition constant_by_vars variables Height constant Height constant, Height parameters (measured ) merged parameters using specified variables. Height constant (e.g. measured screening baseline) use constant_by_vars select subject-level variable merge (e.g. USUBJID). produce Waist Height Ratio visits Waist Circumference measured. Otherwise calculated visits Height Waist Circumference collected. Permitted Values: list variables created exprs(), e.g. exprs(USUBJID, VISIT) get_unit_expr expression providing unit parameter result used check units input parameters. units consistent within parameter, error thrown. Additionally, input parameters measured different units mutually convertible (e.g., centimeters one parameter inches another), automatic conversion performed order uniform values calculating ratio. Note: Conversion factors come unit definitions per CDISC standards. m defined 100 cm mm defined 0.1 cm defined 2.54 cm ft defined 30.48 cm Permitted Values: variable input dataset function call","code":""},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/reference/derive_param_waisthgt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds a Parameter for Waist to Height Ratio — derive_param_waisthgt","text":"input dataset new parameter added. Note, variable populated new parameter rows specified by_vars.","code":""},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/reference/derive_param_waisthgt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adds a Parameter for Waist to Height Ratio — derive_param_waisthgt","text":"analysis value new parameter derived $$WAISTHGT = \\frac{WSTCIR}{HEIGHT}$$","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/reference/derive_param_waisthgt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adds a Parameter for Waist to Height Ratio — derive_param_waisthgt","text":"","code":"library(tibble) library(rlang)  # Example 1: Derive Waist to Height Ratio where Height is measured only once  advs <- tribble(   ~USUBJID, ~PARAMCD, ~PARAM, ~AVAL, ~AVALU, ~VISIT,   \"01-101-1001\", \"HEIGHT\", \"Height (cm)\", 147, \"cm\", \"SCREENING\",   \"01-101-1001\", \"WSTCIR\", \"Waist Circumference (cm)\", 110, \"cm\", \"SCREENING\",   \"01-101-1001\", \"WSTCIR\", \"Waist Circumference (cm)\", 108, \"cm\", \"WEEK 2\",   \"01-101-1001\", \"WSTCIR\", \"Waist Circumference (cm)\", 107, \"cm\", \"WEEK 3\",   \"01-101-1002\", \"HEIGHT\", \"Height (cm)\", 163, \"cm\", \"SCREENING\",   \"01-101-1002\", \"WSTCIR\", \"Waist Circumference (cm)\", 120, \"cm\", \"SCREENING\",   \"01-101-1002\", \"WSTCIR\", \"Waist Circumference (cm)\", 118, \"cm\", \"WEEK 2\",   \"01-101-1002\", \"WSTCIR\", \"Waist Circumference (cm)\", 117, \"cm\", \"WEEK 3\", )  derive_param_waisthgt(   advs,   by_vars = exprs(USUBJID, VISIT),   wstcir_code = \"WSTCIR\",   height_code = \"HEIGHT\",   set_values_to = exprs(     PARAMCD = \"WAISTHGT\",     PARAM = \"Waist to Height Ratio\"   ),   constant_by_vars = exprs(USUBJID),   get_unit_expr = admiral::extract_unit(PARAM) ) #> # A tibble: 14 × 6 #>    USUBJID     PARAMCD  PARAM                       AVAL AVALU VISIT     #>    <chr>       <chr>    <chr>                      <dbl> <chr> <chr>     #>  1 01-101-1001 HEIGHT   Height (cm)              147     cm    SCREENING #>  2 01-101-1001 WSTCIR   Waist Circumference (cm) 110     cm    SCREENING #>  3 01-101-1001 WSTCIR   Waist Circumference (cm) 108     cm    WEEK 2    #>  4 01-101-1001 WSTCIR   Waist Circumference (cm) 107     cm    WEEK 3    #>  5 01-101-1002 HEIGHT   Height (cm)              163     cm    SCREENING #>  6 01-101-1002 WSTCIR   Waist Circumference (cm) 120     cm    SCREENING #>  7 01-101-1002 WSTCIR   Waist Circumference (cm) 118     cm    WEEK 2    #>  8 01-101-1002 WSTCIR   Waist Circumference (cm) 117     cm    WEEK 3    #>  9 01-101-1001 WAISTHGT Waist to Height Ratio      0.748 NA    SCREENING #> 10 01-101-1001 WAISTHGT Waist to Height Ratio      0.735 NA    WEEK 2    #> 11 01-101-1001 WAISTHGT Waist to Height Ratio      0.728 NA    WEEK 3    #> 12 01-101-1002 WAISTHGT Waist to Height Ratio      0.736 NA    SCREENING #> 13 01-101-1002 WAISTHGT Waist to Height Ratio      0.724 NA    WEEK 2    #> 14 01-101-1002 WAISTHGT Waist to Height Ratio      0.718 NA    WEEK 3     # Example 2: Same as above but only adding Waist to Height Ratio # at certain visits  derive_param_waisthgt(   advs,   by_vars = exprs(USUBJID, VISIT),   wstcir_code = \"WSTCIR\",   height_code = \"HEIGHT\",   set_values_to = exprs(     PARAMCD = \"WAISTHGT\",     PARAM = \"Waist to Height Ratio\"   ),   constant_by_vars = exprs(USUBJID),   get_unit_expr = admiral::extract_unit(PARAM),   filter = VISIT %in% c(\"SCREENING\", \"WEEK 3\") ) #> # A tibble: 12 × 6 #>    USUBJID     PARAMCD  PARAM                       AVAL AVALU VISIT     #>    <chr>       <chr>    <chr>                      <dbl> <chr> <chr>     #>  1 01-101-1001 HEIGHT   Height (cm)              147     cm    SCREENING #>  2 01-101-1001 WSTCIR   Waist Circumference (cm) 110     cm    SCREENING #>  3 01-101-1001 WSTCIR   Waist Circumference (cm) 108     cm    WEEK 2    #>  4 01-101-1001 WSTCIR   Waist Circumference (cm) 107     cm    WEEK 3    #>  5 01-101-1002 HEIGHT   Height (cm)              163     cm    SCREENING #>  6 01-101-1002 WSTCIR   Waist Circumference (cm) 120     cm    SCREENING #>  7 01-101-1002 WSTCIR   Waist Circumference (cm) 118     cm    WEEK 2    #>  8 01-101-1002 WSTCIR   Waist Circumference (cm) 117     cm    WEEK 3    #>  9 01-101-1001 WAISTHGT Waist to Height Ratio      0.748 NA    SCREENING #> 10 01-101-1001 WAISTHGT Waist to Height Ratio      0.728 NA    WEEK 3    #> 11 01-101-1002 WAISTHGT Waist to Height Ratio      0.736 NA    SCREENING #> 12 01-101-1002 WAISTHGT Waist to Height Ratio      0.718 NA    WEEK 3     # Example 3: Pediatric study where Height and Waist Circumference # are measured multiple times  advs <- tribble(   ~USUBJID, ~PARAMCD, ~PARAM, ~AVAL, ~AVALU, ~VISIT,   \"01-101-1001\", \"HEIGHT\", \"Height (cm)\", 147, \"cm\", \"SCREENING\",   \"01-101-1001\", \"HEIGHT\", \"Height (cm)\", 148, \"cm\", \"WEEK 2\",   \"01-101-1001\", \"HEIGHT\", \"Height (cm)\", 149, \"cm\", \"WEEK 3\",   \"01-101-1001\", \"WSTCIR\", \"Waist Circumference (cm)\", 100, \"cm\", \"SCREENING\",   \"01-101-1001\", \"WSTCIR\", \"Waist Circumference (cm)\", 99, \"cm\", \"WEEK 2\",   \"01-101-1001\", \"WSTCIR\", \"Waist Circumference (cm)\", 98, \"cm\", \"WEEK 3\",   \"01-101-1002\", \"HEIGHT\", \"Height (cm)\", 163, \"cm\", \"SCREENING\",   \"01-101-1002\", \"HEIGHT\", \"Height (cm)\", 164, \"cm\", \"WEEK 2\",   \"01-101-1002\", \"HEIGHT\", \"Height (cm)\", 165, \"cm\", \"WEEK 3\",   \"01-101-1002\", \"WSTCIR\", \"Waist Circumference (cm)\", 110, \"cm\", \"SCREENING\",   \"01-101-1002\", \"WSTCIR\", \"Waist Circumference (cm)\", 109, \"cm\", \"WEEK 2\",   \"01-101-1002\", \"WSTCIR\", \"Waist Circumference (cm)\", 108, \"cm\", \"WEEK 3\" )  derive_param_waisthgt(   advs,   by_vars = exprs(USUBJID, VISIT),   wstcir_code = \"WSTCIR\",   height_code = \"HEIGHT\",   set_values_to = exprs(     PARAMCD = \"WAISTHGT\",     PARAM = \"Waist to Height Ratio\"   ),   get_unit_expr = admiral::extract_unit(PARAM) ) #> # A tibble: 18 × 6 #>    USUBJID     PARAMCD  PARAM                       AVAL AVALU VISIT     #>    <chr>       <chr>    <chr>                      <dbl> <chr> <chr>     #>  1 01-101-1001 HEIGHT   Height (cm)              147     cm    SCREENING #>  2 01-101-1001 HEIGHT   Height (cm)              148     cm    WEEK 2    #>  3 01-101-1001 HEIGHT   Height (cm)              149     cm    WEEK 3    #>  4 01-101-1001 WSTCIR   Waist Circumference (cm) 100     cm    SCREENING #>  5 01-101-1001 WSTCIR   Waist Circumference (cm)  99     cm    WEEK 2    #>  6 01-101-1001 WSTCIR   Waist Circumference (cm)  98     cm    WEEK 3    #>  7 01-101-1002 HEIGHT   Height (cm)              163     cm    SCREENING #>  8 01-101-1002 HEIGHT   Height (cm)              164     cm    WEEK 2    #>  9 01-101-1002 HEIGHT   Height (cm)              165     cm    WEEK 3    #> 10 01-101-1002 WSTCIR   Waist Circumference (cm) 110     cm    SCREENING #> 11 01-101-1002 WSTCIR   Waist Circumference (cm) 109     cm    WEEK 2    #> 12 01-101-1002 WSTCIR   Waist Circumference (cm) 108     cm    WEEK 3    #> 13 01-101-1001 WAISTHGT Waist to Height Ratio      0.680 NA    SCREENING #> 14 01-101-1001 WAISTHGT Waist to Height Ratio      0.669 NA    WEEK 2    #> 15 01-101-1001 WAISTHGT Waist to Height Ratio      0.658 NA    WEEK 3    #> 16 01-101-1002 WAISTHGT Waist to Height Ratio      0.675 NA    SCREENING #> 17 01-101-1002 WAISTHGT Waist to Height Ratio      0.665 NA    WEEK 2    #> 18 01-101-1002 WAISTHGT Waist to Height Ratio      0.655 NA    WEEK 3     # Example 4: Automatic conversion is performed when deriving the ratio # if parameters are provided in different units (e.g. centimeters and inches)  advs <- tribble(   ~USUBJID, ~PARAMCD, ~PARAM, ~AVAL, ~AVALU, ~VISIT,   \"01-101-1001\", \"HEIGHT\", \"Height (cm)\", 147, \"cm\", \"SCREENING\",   \"01-101-1001\", \"WSTCIR\", \"Waist Circumference (in)\", 39.37, \"in\", \"SCREENING\",   \"01-101-1001\", \"WSTCIR\", \"Waist Circumference (in)\", 38.98, \"in\", \"WEEK 2\",   \"01-101-1001\", \"WSTCIR\", \"Waist Circumference (in)\", 38.58, \"in\", \"WEEK 3\",   \"01-101-1002\", \"HEIGHT\", \"Height (cm)\", 163, \"cm\", \"SCREENING\",   \"01-101-1002\", \"WSTCIR\", \"Waist Circumference (in)\", 43.31, \"in\", \"SCREENING\",   \"01-101-1002\", \"WSTCIR\", \"Waist Circumference (in)\", 42.91, \"in\", \"WEEK 2\",   \"01-101-1002\", \"WSTCIR\", \"Waist Circumference (in)\", 42.52, \"in\", \"WEEK 3\" )  derive_param_waisthgt(   advs,   by_vars = exprs(USUBJID, VISIT),   wstcir_code = \"WSTCIR\",   height_code = \"HEIGHT\",   set_values_to = exprs(     PARAMCD = \"WAISTHGT\",     PARAM = \"Waist to Height Ratio\"   ),   constant_by_vars = exprs(USUBJID),   get_unit_expr = admiral::extract_unit(PARAM) ) #> ℹ Unit conversion performed for \"HEIGHT\". Values converted from \"cm\" to \"in\". #> # A tibble: 14 × 6 #>    USUBJID     PARAMCD  PARAM                       AVAL AVALU VISIT     #>    <chr>       <chr>    <chr>                      <dbl> <chr> <chr>     #>  1 01-101-1001 HEIGHT   Height (cm)              147     cm    SCREENING #>  2 01-101-1001 WSTCIR   Waist Circumference (in)  39.4   in    SCREENING #>  3 01-101-1001 WSTCIR   Waist Circumference (in)  39.0   in    WEEK 2    #>  4 01-101-1001 WSTCIR   Waist Circumference (in)  38.6   in    WEEK 3    #>  5 01-101-1002 HEIGHT   Height (cm)              163     cm    SCREENING #>  6 01-101-1002 WSTCIR   Waist Circumference (in)  43.3   in    SCREENING #>  7 01-101-1002 WSTCIR   Waist Circumference (in)  42.9   in    WEEK 2    #>  8 01-101-1002 WSTCIR   Waist Circumference (in)  42.5   in    WEEK 3    #>  9 01-101-1001 WAISTHGT Waist to Height Ratio      0.680 NA    SCREENING #> 10 01-101-1001 WAISTHGT Waist to Height Ratio      0.674 NA    WEEK 2    #> 11 01-101-1001 WAISTHGT Waist to Height Ratio      0.667 NA    WEEK 3    #> 12 01-101-1002 WAISTHGT Waist to Height Ratio      0.675 NA    SCREENING #> 13 01-101-1002 WAISTHGT Waist to Height Ratio      0.669 NA    WEEK 2    #> 14 01-101-1002 WAISTHGT Waist to Height Ratio      0.663 NA    WEEK 3"},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/reference/derive_param_waisthip.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds a Parameter for Waist to Hip Ratio — derive_param_waisthip","title":"Adds a Parameter for Waist to Hip Ratio — derive_param_waisthip","text":"Adds parameter Waist Hip Ratio using Waist Circumference Hip Circumference group (e.g., subject visit) source parameters available. Note: wrapper function generic admiral::derive_param_computed().","code":""},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/reference/derive_param_waisthip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds a Parameter for Waist to Hip Ratio — derive_param_waisthip","text":"","code":"derive_param_waisthip(   dataset,   by_vars,   wstcir_code = \"WSTCIR\",   hipcir_code = \"HIPCIR\",   set_values_to = exprs(PARAMCD = \"WAISTHIP\"),   filter = NULL,   get_unit_expr )"},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/reference/derive_param_waisthip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds a Parameter for Waist to Hip Ratio — derive_param_waisthip","text":"dataset Input dataset variables specified by_vars argument expected dataset. PARAMCD, AVAL expected well. variable specified by_vars PARAMCD must unique key input dataset restricting filter condition (filter argument) parameters specified wstcir_code hipcir_code. by_vars Grouping variables Grouping variables uniquely identifying set records new_vars calculated. Permitted Values: list variables created exprs() wstcir_code Waist Circumference parameter code observations PARAMCD equals specified value considered Waist Circumference. Permitted Values: character value hipcir_code Hip Circumference parameter code observations PARAMCD equals specified value considered Hip Circumference Permitted Values: character value set_values_to Variables set specified variables set specified values new observations. example exprs(PARAMCD = \"RATIO\") defines parameter code new parameter. Permitted Values: List variable-value pairs filter Filter condition specified condition applied input dataset deriving new parameter, .e., observations fulfilling condition taken account. Permitted Values: condition get_unit_expr expression providing unit parameter result used check units input parameters. units consistent within parameter, error thrown. Additionally, input parameters measured different units mutually convertible (e.g., centimeters one parameter inches another), automatic conversion performed order uniform values calculating ratio. Note: Conversion factors come unit definitions per CDISC standards. m defined 100 cm mm defined 0.1 cm defined 2.54 cm ft defined 30.48 cm Permitted Values: variable input dataset function call","code":""},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/reference/derive_param_waisthip.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds a Parameter for Waist to Hip Ratio — derive_param_waisthip","text":"input dataset new parameter added. Note, variable populated new parameter rows specified by_vars.","code":""},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/reference/derive_param_waisthip.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adds a Parameter for Waist to Hip Ratio — derive_param_waisthip","text":"analysis value new parameter derived $$WAISTHIP = \\frac{WSTCIR}{HIPCIR}$$","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/reference/derive_param_waisthip.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adds a Parameter for Waist to Hip Ratio — derive_param_waisthip","text":"","code":"library(tibble) library(rlang)  advs <- tribble(   ~USUBJID, ~PARAMCD, ~PARAM, ~AVAL, ~AVALU, ~VISIT,   \"01-101-1001\", \"WSTCIR\", \"Waist Circumference (cm)\", 110, \"cm\", \"SCREENING\",   \"01-101-1001\", \"WSTCIR\", \"Waist Circumference (cm)\", 108, \"cm\", \"WEEK 2\",   \"01-101-1001\", \"WSTCIR\", \"Waist Circumference (cm)\", 107, \"cm\", \"WEEK 3\",   \"01-101-1001\", \"HIPCIR\", \"Hip Circumference (cm)\", 125, \"cm\", \"SCREENING\",   \"01-101-1001\", \"HIPCIR\", \"Hip Circumference (cm)\", 124, \"cm\", \"WEEK 2\",   \"01-101-1001\", \"HIPCIR\", \"Hip Circumference (cm)\", 123, \"cm\", \"WEEK 3\",   \"01-101-1002\", \"WSTCIR\", \"Waist Circumference (cm)\", 120, \"cm\", \"SCREENING\",   \"01-101-1002\", \"WSTCIR\", \"Waist Circumference (cm)\", 118, \"cm\", \"WEEK 2\",   \"01-101-1002\", \"WSTCIR\", \"Waist Circumference (cm)\", 117, \"cm\", \"WEEK 3\",   \"01-101-1002\", \"HIPCIR\", \"Hip Circumference (cm)\", 135, \"cm\", \"SCREENING\",   \"01-101-1002\", \"HIPCIR\", \"Hip Circumference (cm)\", 133, \"cm\", \"WEEK 2\",   \"01-101-1002\", \"HIPCIR\", \"Hip Circumference (cm)\", 132, \"cm\", \"WEEK 3\" )  derive_param_waisthip(   advs,   by_vars = exprs(USUBJID, VISIT),   wstcir_code = \"WSTCIR\",   hipcir_code = \"HIPCIR\",   set_values_to = exprs(     PARAMCD = \"WAISTHIP\",     PARAM = \"Waist to Hip Ratio\"   ),   get_unit_expr = admiral::extract_unit(PARAM) ) #> # A tibble: 18 × 6 #>    USUBJID     PARAMCD  PARAM                       AVAL AVALU VISIT     #>    <chr>       <chr>    <chr>                      <dbl> <chr> <chr>     #>  1 01-101-1001 WSTCIR   Waist Circumference (cm) 110     cm    SCREENING #>  2 01-101-1001 WSTCIR   Waist Circumference (cm) 108     cm    WEEK 2    #>  3 01-101-1001 WSTCIR   Waist Circumference (cm) 107     cm    WEEK 3    #>  4 01-101-1001 HIPCIR   Hip Circumference (cm)   125     cm    SCREENING #>  5 01-101-1001 HIPCIR   Hip Circumference (cm)   124     cm    WEEK 2    #>  6 01-101-1001 HIPCIR   Hip Circumference (cm)   123     cm    WEEK 3    #>  7 01-101-1002 WSTCIR   Waist Circumference (cm) 120     cm    SCREENING #>  8 01-101-1002 WSTCIR   Waist Circumference (cm) 118     cm    WEEK 2    #>  9 01-101-1002 WSTCIR   Waist Circumference (cm) 117     cm    WEEK 3    #> 10 01-101-1002 HIPCIR   Hip Circumference (cm)   135     cm    SCREENING #> 11 01-101-1002 HIPCIR   Hip Circumference (cm)   133     cm    WEEK 2    #> 12 01-101-1002 HIPCIR   Hip Circumference (cm)   132     cm    WEEK 3    #> 13 01-101-1001 WAISTHIP Waist to Hip Ratio         0.88  NA    SCREENING #> 14 01-101-1001 WAISTHIP Waist to Hip Ratio         0.871 NA    WEEK 2    #> 15 01-101-1001 WAISTHIP Waist to Hip Ratio         0.870 NA    WEEK 3    #> 16 01-101-1002 WAISTHIP Waist to Hip Ratio         0.889 NA    SCREENING #> 17 01-101-1002 WAISTHIP Waist to Hip Ratio         0.887 NA    WEEK 2    #> 18 01-101-1002 WAISTHIP Waist to Hip Ratio         0.886 NA    WEEK 3     # Only adding Waist to Hip Ratio at certain visits  derive_param_waisthip(   advs,   by_vars = exprs(USUBJID, VISIT),   wstcir_code = \"WSTCIR\",   hipcir_code = \"HIPCIR\",   set_values_to = exprs(     PARAMCD = \"WAISTHIP\",     PARAM = \"Waist to Hip Ratio\"   ),   get_unit_expr = admiral::extract_unit(PARAM),   filter = VISIT %in% c(\"SCREENING\", \"WEEK 3\") ) #> # A tibble: 16 × 6 #>    USUBJID     PARAMCD  PARAM                       AVAL AVALU VISIT     #>    <chr>       <chr>    <chr>                      <dbl> <chr> <chr>     #>  1 01-101-1001 WSTCIR   Waist Circumference (cm) 110     cm    SCREENING #>  2 01-101-1001 WSTCIR   Waist Circumference (cm) 108     cm    WEEK 2    #>  3 01-101-1001 WSTCIR   Waist Circumference (cm) 107     cm    WEEK 3    #>  4 01-101-1001 HIPCIR   Hip Circumference (cm)   125     cm    SCREENING #>  5 01-101-1001 HIPCIR   Hip Circumference (cm)   124     cm    WEEK 2    #>  6 01-101-1001 HIPCIR   Hip Circumference (cm)   123     cm    WEEK 3    #>  7 01-101-1002 WSTCIR   Waist Circumference (cm) 120     cm    SCREENING #>  8 01-101-1002 WSTCIR   Waist Circumference (cm) 118     cm    WEEK 2    #>  9 01-101-1002 WSTCIR   Waist Circumference (cm) 117     cm    WEEK 3    #> 10 01-101-1002 HIPCIR   Hip Circumference (cm)   135     cm    SCREENING #> 11 01-101-1002 HIPCIR   Hip Circumference (cm)   133     cm    WEEK 2    #> 12 01-101-1002 HIPCIR   Hip Circumference (cm)   132     cm    WEEK 3    #> 13 01-101-1001 WAISTHIP Waist to Hip Ratio         0.88  NA    SCREENING #> 14 01-101-1001 WAISTHIP Waist to Hip Ratio         0.870 NA    WEEK 3    #> 15 01-101-1002 WAISTHIP Waist to Hip Ratio         0.889 NA    SCREENING #> 16 01-101-1002 WAISTHIP Waist to Hip Ratio         0.886 NA    WEEK 3     # Automatic conversion is performed when deriving the ratio # if parameters are provided in different units  advs <- tribble(   ~USUBJID, ~PARAMCD, ~PARAM, ~AVAL, ~AVALU, ~VISIT,   \"01-101-1001\", \"HIPCIR\", \"Hip Circumference (cm)\", 125, \"cm\", \"SCREENING\",   \"01-101-1001\", \"HIPCIR\", \"Hip Circumference (cm)\", 124, \"cm\", \"WEEK 2\",   \"01-101-1001\", \"HIPCIR\", \"Hip Circumference (cm)\", 123, \"cm\", \"WEEK 3\",   \"01-101-1001\", \"WSTCIR\", \"Waist Circumference (in)\", 43.31, \"in\", \"SCREENING\",   \"01-101-1001\", \"WSTCIR\", \"Waist Circumference (in)\", 42.52, \"in\", \"WEEK 2\",   \"01-101-1001\", \"WSTCIR\", \"Waist Circumference (in)\", 42.13, \"in\", \"WEEK 3\",   \"01-101-1002\", \"HIPCIR\", \"Hip Circumference (cm)\", 135, \"cm\", \"SCREENING\",   \"01-101-1002\", \"HIPCIR\", \"Hip Circumference (cm)\", 133, \"cm\", \"WEEK 2\",   \"01-101-1002\", \"HIPCIR\", \"Hip Circumference (cm)\", 132, \"cm\", \"WEEK 3\",   \"01-101-1002\", \"WSTCIR\", \"Waist Circumference (in)\", 47.24, \"in\", \"SCREENING\",   \"01-101-1002\", \"WSTCIR\", \"Waist Circumference (in)\", 46.46, \"in\", \"WEEK 2\",   \"01-101-1002\", \"WSTCIR\", \"Waist Circumference (in)\", 46.06, \"in\", \"WEEK 3\" )  derive_param_waisthip(   advs,   by_vars = exprs(USUBJID, VISIT),   wstcir_code = \"WSTCIR\",   hipcir_code = \"HIPCIR\",   set_values_to = exprs(     PARAMCD = \"WAISTHIP\",     PARAM = \"Waist to Hip Ratio\"   ),   get_unit_expr = admiral::extract_unit(PARAM) ) #> ℹ Unit conversion performed for \"HIPCIR\". Values converted from \"cm\" to \"in\". #> # A tibble: 18 × 6 #>    USUBJID     PARAMCD  PARAM                       AVAL AVALU VISIT     #>    <chr>       <chr>    <chr>                      <dbl> <chr> <chr>     #>  1 01-101-1001 HIPCIR   Hip Circumference (cm)   125     cm    SCREENING #>  2 01-101-1001 HIPCIR   Hip Circumference (cm)   124     cm    WEEK 2    #>  3 01-101-1001 HIPCIR   Hip Circumference (cm)   123     cm    WEEK 3    #>  4 01-101-1001 WSTCIR   Waist Circumference (in)  43.3   in    SCREENING #>  5 01-101-1001 WSTCIR   Waist Circumference (in)  42.5   in    WEEK 2    #>  6 01-101-1001 WSTCIR   Waist Circumference (in)  42.1   in    WEEK 3    #>  7 01-101-1002 HIPCIR   Hip Circumference (cm)   135     cm    SCREENING #>  8 01-101-1002 HIPCIR   Hip Circumference (cm)   133     cm    WEEK 2    #>  9 01-101-1002 HIPCIR   Hip Circumference (cm)   132     cm    WEEK 3    #> 10 01-101-1002 WSTCIR   Waist Circumference (in)  47.2   in    SCREENING #> 11 01-101-1002 WSTCIR   Waist Circumference (in)  46.5   in    WEEK 2    #> 12 01-101-1002 WSTCIR   Waist Circumference (in)  46.1   in    WEEK 3    #> 13 01-101-1001 WAISTHIP Waist to Hip Ratio         0.880 NA    SCREENING #> 14 01-101-1001 WAISTHIP Waist to Hip Ratio         0.871 NA    WEEK 2    #> 15 01-101-1001 WAISTHIP Waist to Hip Ratio         0.870 NA    WEEK 3    #> 16 01-101-1002 WAISTHIP Waist to Hip Ratio         0.889 NA    SCREENING #> 17 01-101-1002 WAISTHIP Waist to Hip Ratio         0.887 NA    WEEK 2    #> 18 01-101-1002 WAISTHIP Waist to Hip Ratio         0.886 NA    WEEK 3"},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/reference/unit-conversion.html","id":null,"dir":"Reference","previous_headings":"","what":"Unit conversion — unit-conversion","title":"Unit conversion — unit-conversion","text":"get_conv_factor() extracts conversion factor pair units. Fails error units supported/convertible. get_conv_factors_all() returns conversion factors supported. Note: Conversion factors come unit definitions per CDISC standards.","code":""},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/reference/unit-conversion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unit conversion — unit-conversion","text":"","code":"get_conv_factor(from_unit, to_unit)  get_conv_factors_all()"},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/news/index.html","id":"admiralmetabolic-010","dir":"Changelog","previous_headings":"","what":"admiralmetabolic 0.1.0","title":"admiralmetabolic 0.1.0","text":"CRAN release: 2025-01-20","code":""},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/news/index.html","id":"new-features-0-1-0","dir":"Changelog","previous_headings":"","what":"New features","title":"admiralmetabolic 0.1.0","text":"New vignette “Creating Metabolic ADLB ADaM”. (#102) New ADLB template (ad_adlb.R) creating metabolic specific ADLB dataset. (#108) SDTM dataset metabolic specific laboratory measurements (lb_metabolic) {pharmaversesdtm}. (#94) ADSL dataset metabolic specific variables (adsl_metabolic). (#73 & #116)","code":""},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/news/index.html","id":"documentation-0-1-0","dir":"Changelog","previous_headings":"","what":"Documentation","title":"admiralmetabolic 0.1.0","text":"Updated installation instructions install CRAN. (#88) Changed vignettes use admiralmetabolic::admiralmetabolic_adsl instead admiral::admiral_adsl. (#123)","code":""},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/news/index.html","id":"template-programs-0-1-0","dir":"Changelog","previous_headings":"","what":"Template programs","title":"admiralmetabolic 0.1.0","text":"Changed template programs use admiralmetabolic::admiralmetabolic_adsl instead admiral::admiral_adsl. (#123)","code":""},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/news/index.html","id":"various-0-1-0","dir":"Changelog","previous_headings":"","what":"Various","title":"admiralmetabolic 0.1.0","text":"Moved test data vs_metabolic, qs_metabolic dm_metabolic {admiralmetabolic} {pharmaversesdtm}. (#95) Activated automatic version bumping CICD workflow. (#98) Added pharmaverse, CRAN Test Coverage badges home page. (#97) Added initial package scope home page. (#101) Added advs dataset. (#113) Updated contributor list. (#122)","code":""},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/news/index.html","id":"admiralmetabolic-010-1","dir":"Changelog","previous_headings":"","what":"admiralmetabolic 0.1.0","title":"admiralmetabolic 0.1.0","text":"CRAN release: 2025-01-20 Initial package release mainly focused obesity therapeutic area.","code":""},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/news/index.html","id":"functions-0-1-0","dir":"Changelog","previous_headings":"","what":"Functions","title":"admiralmetabolic 0.1.0","text":"function derive_param_waisthip() deriving Waist Hip Ratio. (#33 & #52) function derive_param_waisthgt() deriving Waist Height Ratio. (#33 & #52)","code":""},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/news/index.html","id":"template-programs-0-1-0-1","dir":"Changelog","previous_headings":"","what":"Template programs","title":"admiralmetabolic 0.1.0","text":"ADVS template scripts ad_advs.R creates Vital Sign Analysis Dataset metabolic specific derivations. (#35) ADCOEQ template scripts ad_adcoeq.R creates Control Eating Questionnaires Analysis Dataset. (#41)","code":""},{"path":"https://pharmaverse.github.io/admiralmetabolic/dev/news/index.html","id":"documentation-0-1-0-1","dir":"Changelog","previous_headings":"","what":"Documentation","title":"admiralmetabolic 0.1.0","text":"Vignette “Creating Metabolic ADVS ADaM”. (#28) Vignette “Creating Control Eating Questionnaire ADaM”. (#53)","code":""}]
